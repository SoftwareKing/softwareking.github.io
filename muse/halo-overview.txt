---
title: "漫谈基础架构之应用框架"
author: "许进"
description: "本文主要介绍了什么是应用框架，以及为什么要设计开发应用框架。"
categories: "Muse"
tags: ["Ngnix"]
date: 2020-02-27 21:00:00 +0800
cover: "cover.jpg"
---

谈应用框架之前,先聊一下基础架构和应用架构.

## 基础架构概述

不同的Level的公司,基础架构是不一样的.有钱的公司,自主研发,引领基础架构潮流.

国内说做所谓基础架构的活计，实际就是把开源的代码框架拿来包装一下自己的界面或者封皮，然后自己起个名字，就成了自己的基础架构。

## 基础架构分类

移动基础架构,测试基础架构,后端基础架构,本文主要介绍后端基础架构.

## 基础架构的职责

![](halo-all.png)

## 框架概述

## 应用框架概述

框架（Framework）是可重用的，半成品的应用程序.中大型公司都有自己的应用框架。
应用框架存在的意义就是统一应用的创建标准，开发标准，上线标准和构建标准。

* 创建标准: 应用的创建过程的标准化，创建标准可以通过代码生成器去统一生成处理，业务开发同学只需填充业务代码即可。
* 开发标准:中间件的使用标准(包括功能，中间件版本等，通过内置的方式统一调优预设，统一中间件的产品基线)，第三方Jar的使用标准(Spring,Spring Boot,Mybtais版本)
* 上线标准：通过应用框架内置的Jar进行上线管控和约束
* 构建标准: 规范化应用打包构建，比如使用Maven或Gradle，或者自己开发的Maven插件或Gradle插件通过内置的方式，做一些打包构建时的check。

Spring或Spring Boot不算应用框架。

应用框架对不同的基础组件(比如RPC框架,配置中心sdk,注册中心sdk,分布式任务调度sdk)进行整体性封装，屏蔽版本,简化使用,增加易用性,让业务代码和技术解藕,抽象傻瓜式SDK.从而规范使用,为后续设计框架自动升级工具奠定基础.

## 中台框架概述

应用框架的出现是为了统一应用的开发,构建标准,使上万程序员写出来的代码,风格一致.从而控制程序猿的随心所欲.

世界上本无中台框架,只是站在应用架构基础之上,将平台化,服务化,业务身份,扩展点,流程编排运用其中,方便开发形成可服用的业务资产.

中台框架必须建立在应用框架之上.主要以DDD思想为本，致力于业务资产的可沉淀可复用，全方位解决复杂业务场景的扩展问题，实现中台核心要素，赋能中台建设。


## 什么是Halo Framework的设计思想

Halo框架的主要思想是 流程组合节点,节点调用域服务,域服务包含若干域能力,域能力下若干个业务扩展。

* 业务包与平台分离的插件化架构： 平台提供插件包注册机制，实现业务方插件包在运行期的注册。业务代码只允许存在于插件包中， 与平台代码严格分离。业务包的代码配置库也与平台的代码库分离，通过二方包的方式，提供给容器加载

* 全链路统一的业务身份： 平台需要能有按“业务身份”进行业务与业务之间逻辑隔离的能力，而不是传统SPI架构不区分业务身份， 简单过滤的方式。如何设计这个业务身份，也成为业务间隔离架构的关键。

* 管理域与运行域分离： 业务逻辑不能依靠运行期动态计算，要能在静态期进行定义并可视化呈现。 业务定义中出现的规则叠加冲突，也在静态器进行冲突决策。在运行期，严格按照静态器定义的业务规则、冲突决策策略执行。


## 什么是Halo Framework

Halo Framework是一款基于DDD+CQRS+扩展点+流程编排的应用框架，致力于采用 领域驱动 的设计思想，规范控制程序员的随心所欲， 从而解决软件的复杂性问题。

Halo框架是把基础架构,业务架构,应用架构,业务中台有机的结合起来设计的一套框架.

Halo框架把CQRS,六变形架构,洋葱架构,DDD整合之后的架构图,如下所示:

![](Halo2.0.svg)

## Halo框架组成

Halo Framework的主要模块如下所示:

* halo-cqrs：读写分离架构-所有请求封装为命令对象，通过Command Bus分发到命令处理器执行，通过Event和Event Bus等实现读写分离。

* halo-ddd: 根据领域驱动设计思想，自定义注解 @Entity(实体)，@Factory(工厂), @DomainService(领域服务), @AggregateRoot(聚合根),@AggregateRoot(聚合根), @UniqueIdentity(实体唯一标识),@AggregatePart(聚合部件),@ValueObject(值对象)，@DomainRepository(资源库)，@DomainAbility(域能力) 等进行战术设计，落地DDD，实现 业务与业务 隔离。

* Halo Admin: 中台可视化管控平台，全链路可视化视角，对业务资产进行可视化。

* Halo Boot: 基于Spring Boot定制的Starter。包含Halo Basic,Halo Web，Halo Swagger，Halo ES6，Halo Job,Halo Test,Halo MyBatis等

* Halo Extension：基于扩展点的设计思想，自定义 @ExtensionPoint(扩展点注解) 和 @Extension(扩展注解), 实现 平台和插件 隔离。

* Halo Flow: 基于流程编排思想，开发业务组件，编排应用内部已有业务资产，快速响应前台需求，久而久之形成大量可复用的业务组件库。

* Halo ToolKit: 一款IDEA插件，只为加速Halo应用开发而生。

* Halo Cloud: 对Spring Cloud进行封装增强，简化熟悉使用成本,提高开发效率。更多访问VII Halo Cloud

* Halo Codegen: 通过设计代码生成器, 快速生成最佳实践的基础代码和规范，提高开发效率和生产力，让业务开发人员专注于业务开发。

* Halo Plugin: Halo生态体系中的Gradle或Maven插件。

* Halo Standard: Halo制定的开发规范，更多访问开发规范

* Halo Studio: Halo Studio 基于开源的 IntelliJ Platform进行定制开发扩展，将Halo Toolkit内置其中增强,提供企业级IDE支持。

* Halo Check:基于 Git Hook + JGit + CheckStyle+ PMD 对 代码增量diff Check 是否满足 Halo Style。该项目主要用于Git Commit提交的时候对代码进行检查。分为客户端和Gitlab服务端Check
